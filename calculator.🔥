'''
Simple example of some calculations with functions that take full ownership 
of input variables.
'''

fn add(owned num1: Int, owned num2: Int) -> Int:
    return num1 + num2

fn sub(owned num1: Int, owned num2: Int) -> Int:
    return num1 - num2

fn mult(owned num1: Int, owned num2: Int) -> Int:
    return num1 * num2

fn division(owned num1: Int, owned num2: Int) -> Int:
    return num1 // num2

fn pow(owned num1: Int, owned num2: Int) -> Int:
    return num1 ** num2

fn main():
    let input1: Int = 5
    let input2: Int = 2
    let sum = add(input1, input2)
    let sum_minus_1 = sub(sum, 1)
    let product = mult(sum_minus_1, 5)
    let quotient = division(product, 2)
    let output = pow(quotient, 2)
    print("Expected: 225")
    print("Output:", output)

    # If you try to access "quotient" variable here, you will get an error

    # It seems like, as a default, if you pass an int into a function with
    # owned varaibles, it automatically tranfers ownership, even without
    # using the trafer specifier (the carrot character ^) in the function call